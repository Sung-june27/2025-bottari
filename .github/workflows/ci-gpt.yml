name: BE PR CI & Review Request Notification

on:
  pull_request:
    branches:
      - be/develop
    types: [opened, synchronize, reopened]

jobs:
  ci-and-pr-notification:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Grant Execute Permission for Gradlew
        run: chmod +x ./backend/bottari/gradlew

      # (A) Docker Compose용 환경변수 주입: .env 파일 생성
      # compose는 .env의 값을 ${VAR}로 치환해서 사용한다.
      - name: Prepare .env for docker compose
        run: |
          cat > .env <<EOF
          TEST_DATABASE_NAME=${{ secrets.TEST_DATABASE_NAME }}
          TEST_DATABASE_PASSWORD=${{ secrets.TEST_DATABASE_PASSWORD }}
          TEST_NGRAM_TOKEN_SIZE=${{ secrets.TEST_NGRAM_TOKEN_SIZE }}
          TEST_DATABASE_IMAGE=${{ secrets.TEST_DATABASE_IMAGE }}
          EOF

      # (B) docker compose로 MySQL 기동
      - name: Start MySQL via docker compose
        run: docker compose -f ci-compose.yml up -d

      # (C) (선택) 헬스체크 기다리기 — compose healthcheck를 신뢰해도 되지만, 한 번 더 안전하게 확인
      - name: Wait for MySQL (extra safety)
        run: |
          for i in {1..36}; do
            if docker exec bottari-mysql mysqladmin ping -h 127.0.0.1 -uroot -p${{ secrets.TEST_DATABASE_PASSWORD }} --silent; then
              echo "MySQL is up!"
              exit 0
            fi
            echo "Waiting for MySQL... ($i/36)"
            sleep 5
          done
          echo "MySQL did not start within 3 minutes."
          exit 1

      # Webhook 설정 (기존 그대로)
      - name: Determine Webhook
        run: echo "WEBHOOK=${{ secrets.DISCORD_BACKEND_WEBHOOK }}" >> $GITHUB_ENV

      # (D) Build & Test — DB 접속 정보는 기존 secrets 그대로 사용
      - name: Build and Test
        id: test
        working-directory: ./backend/bottari
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          DATABASE_USERNAME: ${{ secrets.TEST_DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.TEST_DATABASE_PASSWORD }}
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
        run: ./gradlew clean build --no-daemon

      # (E) 이후 Discord 알림 (성공/실패) 스텝은 너의 기존 스크립트 그대로 유지

      # (F) 항상 정리
      - name: Cleanup docker compose
        if: always()
        run: docker compose -f ci-compose.yml down -v