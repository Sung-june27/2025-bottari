name: BE PR CI & Review Request Notification

on:
  pull_request:
    branches:
      - be/develop
    types: [opened, synchronize, reopened] # 머지/닫힘 이벤트 제외

jobs:
  ci-and-pr-notification:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Grant Execute Permission for Gradlew
        run: chmod +x ./backend/bottari/gradlew

      - name: Create MySQL Custom Config for ngram
        run: |
          echo "[mysqld]" > custom-mysql.cnf
          echo "ngram_token_size=${{ secrets.TEST_NGRAM_TOKEN_SIZE }}" >> custom-mysql.cnf

      - name: Start MySQL with custom image
        run: |
          docker run -d \
            --name test-mysql \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.TEST_DATABASE_PASSWORD }} \
            -e MYSQL_DATABASE=${{ secrets.TEST_DATABASE_NAME }} \
            -p 3306:3306 \
            -v ${{ github.workspace }}/custom-mysql.cnf:/etc/mysql/conf.d/custom.cnf \
            ${{ secrets.TEST_DATABASE_IMAGE }}

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..36}; do
            if docker exec test-mysql mysqladmin ping -h localhost -u root -p${{ secrets.TEST_DATABASE_PASSWORD }} --silent; then
              echo "MySQL is up!"
              exit 0
            fi
            echo "Waiting for MySQL... ($i/36)"
            sleep 5
          done
          echo "MySQL did not start within 3 minutes."
          exit 1

      # Webhook 설정
      - name: Determine Webhook
        run: echo "WEBHOOK=${{ secrets.DISCORD_BACKEND_WEBHOOK }}" >> $GITHUB_ENV

      - name: Build and Test
        id: test
        working-directory: ./backend/bottari
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          DATABASE_USERNAME: ${{ secrets.TEST_DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.TEST_DATABASE_PASSWORD }}
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
        run: ./gradlew clean build --no-daemon

      # 테스트 성공 시 리뷰 요청 알림
      - name: Notify Discord (Test Success - Review Request)
        if: success()
        run: |
          BASE_BRANCH=${{ github.event.pull_request.base.ref }}
          HEAD_BRANCH=${{ github.event.pull_request.head.ref }}

          REVIEWERS=$(jq -r '.pull_request.requested_reviewers[].login' <<< '${{ toJson(github.event) }}')
          MENTIONS=""
          REVIEWER_NAMES=""
          for r in $REVIEWERS; do
            ID=$(echo '${{ secrets.DISCORD_USER_MAP }}' | jq -r --arg r "$r" '.[$r]')
            if [ "$ID" != "null" ]; then
              MENTIONS="$MENTIONS <@$ID>"
              if [ -z "$REVIEWER_NAMES" ]; then
                REVIEWER_NAMES="$r"
              else
                REVIEWER_NAMES="$REVIEWER_NAMES, $r"
              fi
            fi
          done

          if [ -z "$MENTIONS" ]; then
            MENTIONS="리뷰어가 지정되지 않았습니다."
          fi

          MESSAGE='{
            "content": "'"$MENTIONS"' 테스트가 성공했습니다. 코드 리뷰 부탁드립니다!",
            "embeds": [
              {
                "title": "✅ 테스트 성공 - 리뷰 요청",
                "description": "테스트가 통과했습니다. 아래 PR 정보를 확인해주세요.",
                "url": "'"${{ github.event.pull_request.html_url }}"'",
                "color": 65280,
                "fields": [
                  { "name": "PR 제목", "value": "'"${{ github.event.pull_request.title }}"'" },
                  { "name": "브랜치", "value": "'"$HEAD_BRANCH → $BASE_BRANCH"'" },
                  { "name": "작성자", "value": "'"${{ github.event.pull_request.user.login }}"'" },
                  { "name": "리뷰어", "value": "'"$REVIEWER_NAMES"'" }
                ]
              }
            ]
          }'
          echo "$MESSAGE" > payload.json
          curl -H "Content-Type: application/json" -d @payload.json $WEBHOOK

      # 테스트 실패 시 작성자에게 알림
      - name: Notify Discord (Test Failure)
        if: failure()
        run: |
          AUTHOR=${{ github.event.pull_request.user.login }}
          AUTHOR_ID=$(echo '${{ secrets.DISCORD_USER_MAP }}' | jq -r --arg AUTHOR "$AUTHOR" '.[$AUTHOR]')
          LOG_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          MESSAGE='{
            "content": "<@'"$AUTHOR_ID"'> 테스트가 실패했습니다. PR을 확인해주세요!",
            "embeds": [
              {
                "title": "❌ 테스트 실패",
                "description": "테스트가 실패했습니다. [로그 확인하기]('"$LOG_URL"')",
                "url": "'"${{ github.event.pull_request.html_url }}"'",
                "color": 16711680
              }
            ]
          }'
          echo "$MESSAGE" > payload.json
          curl -H "Content-Type: application/json" -d @payload.json $WEBHOOK

      # 항상 DB 컨테이너 정리
      - name: Cleanup MySQL
        if: always()
        run: docker rm -f test-mysql || true
